package cmd

import (
	"fmt"
	log "github.com/sirupsen/logrus"
	"github.com/spf13/viper"
	"io/ioutil"
	"os"
	"os/user"
	"strings"

	"github.com/spf13/cobra"
)

//Hush will use the existing configuration to remove the MOTD file and remove the line displaying it from the shell configuration
var Hush = &cobra.Command{
	Use:   "hush",
	Short: "Remove hush MOTD",
	Long:  `Remove the MOTD file originally generated by hush, but also update the users shell configuration to no longer attempt to display it`,
	Run: func(cmd *cobra.Command, args []string) {
		err := hush(cmd)
		if err != nil {
			cmd.PrintErr(err)
		}
	},
}

func hush(cmd *cobra.Command) error {
	var ViperConfiguration ViperConfig

	viper.Unmarshal(&ViperConfiguration)
	err := ViperConfiguration.Prepare()

	if err != nil {
		log.Fatalf("Failed to parse default values into viper details: %s ",err)
	}

	config, err := readConfig(ViperConfiguration)


	if err != nil {
		cmd.PrintErr(err)
		return err
	}

	//Remove the MOTD file

	err = os.Remove(ViperConfiguration.UserDetails.HomeDir + "/.motd")

	if err != nil {
		cmd.PrintErr(fmt.Errorf("Unable to delete the MOTD File: %s", err.Error()))
		return err
	}

	err = updateShellConfig(ViperConfiguration.UserDetails, config)

	if err != nil {
		cmd.PrintErr(fmt.Errorf("We were unable to update the users shell configuration: %s ", err.Error()))
	}

	return nil
}

func init() {
	Clavis.AddCommand(Hush)
}

func updateShellConfig(user *user.User, config Configuration) error {
	//Open the config file for writing
	configfile, err := ioutil.ReadFile(config.ShellConfigurationFile)

	if err != nil {
		return err
	}

	lines := strings.Split(string(configfile), "\n")
	needle := "cat " + user.HomeDir + "/.motd"

	for key, line := range lines {
		if strings.Contains(line, needle) {
			lines[key] = ""
		}
	}

	//Write the content back to the file
	updated := strings.Join(lines, "\n")
	err = ioutil.WriteFile(config.ShellConfigurationFile, []byte(updated), 0644)

	if err != nil {
		return err
	}

	return nil
}
